{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "deploymentPrefix": {
            "type": "string",
            "maxLength": 10,
            "metadata": {
                "displayName": "Deployment prefix",
                "description": "Provide a prefix (max 10 characters, unique at tenant-scope) for subscription resources created as part of this deploy."
            },
            "defaultValue": "cafsecure"
        },
        "spokeNetworkOneNetAddressPrefix": {
            "type": "string",
            "metadata": {
                "displayName": "IP address prefix for the spoke one network"
            },
            "defaultValue": "10.1.0.0/16"
        },
        "spokeNetworkOneSubnetAddressPrefix": {
            "type": "string",
            "metadata": {
                "displayName": "IP address prefix for the spoke one subnet"
            },
            "defaultValue": "10.1.0.0/24"
        },
        "spokeNetworkTwoNetAddressPrefix": {
            "type": "string",
            "metadata": {
                "displayName": "IP address prefix for the spoke two network"
            },
            "defaultValue": "10.2.0.0/16"
        },
        "spokeNetworkTwoSubnetAddressPrefix": {
            "type": "string",
            "metadata": {
                "displayName": "IP address prefix for the spoke two subnet"
            },
            "defaultValue": "10.2.0.0/24"
        },
        "hubNetworkNetAddressPrefix": {
            "type": "string",
            "metadata": {
                "displayName": "IP address prefix for the hub network"
            },
            "defaultValue": "192.168.0.0/16"
        },
        "enableDdoS": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "Select whether the DDoS Standard protection plan should be enabled or not."
            }
        }
    },
    "variables": {
        "location": "[resourceGroup().location]",
        "dDoSName": "[concat('ddos-', parameters('deploymentPrefix'))]",
        "hubNetwork": {
            "name": "[concat('vnet-', parameters('deploymentPrefix'), '-hub')]",
            "addressPrefix": "[parameters('hubNetworkNetAddressPrefix')]"
        },
        "spokeNetworkOne": {
            "name": "[concat('vnet-', parameters('deploymentPrefix'), '-spoke-one')]",
            "addressPrefix": "[parameters('spokeNetworkOneNetAddressPrefix')]",
            "subnetName": "[concat('snet-', parameters('deploymentPrefix'), '-spoke-one-workload')]",
            "subnetPrefix": "[parameters('spokeNetworkOneSubnetAddressPrefix')]"
        },
        "spokeNetworkTwo": {
            "name": "[concat('vnet-', parameters('deploymentPrefix'), '-spoke-two')]",
            "addressPrefix": "[parameters('spokeNetworkTwoNetAddressPrefix')]",
            "subnetName": "[concat('snet-', parameters('deploymentPrefix'), '-spoke-two-workload')]",
            "subnetPrefix": "[parameters('spokeNetworkTwoSubnetAddressPrefix')]"
        }
    },
    "resources": [

        // DDoS Protection plan
        {
            "condition": "[equals(parameters('enableDdoS'), 'Yes')]",
            "type": "Microsoft.Network/ddosProtectionPlans",
            "apiVersion": "2019-02-01",
            "name": "[variables('dDoSName')]",
            "location": "[variables('location')]",
            "properties": {}
        },

        // Hub virtual network
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2020-05-01",
            "name": "[variables('hubNetwork').name]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/ddosProtectionPlans', variables('dDoSName'))]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('hubNetwork').addressPrefix]"
                    ]
                },
                "subnets": [
                ],
                "enableDdosProtection": "[if(equals(parameters('enableDdoS'), 'Yes'), 'true', 'false')]",
                "ddosProtectionPlan": {
                    "id": "[if(equals(parameters('enableDdoS'), 'Yes'), resourceId('Microsoft.Network/ddosProtectionPlans', variables('dDoSName')), json('null'))]"
                }
            }
        },

        // Spoke one network
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2020-05-01",
            "name": "[variables('spokeNetworkOne').name]",
            "location": "[variables('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('spokeNetworkOne').addressPrefix]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('spokeNetworkOne').subnetName]",
                        "properties": {
                            "addressPrefix": "[variables('spokeNetworkOne').subnetPrefix]"
                        }
                    }
                ]
            }
        },

        // Spoke two network
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2020-05-01",
            "name": "[variables('spokeNetworkTwo').name]",
            "location": "[variables('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('spokeNetworkTwo').addressPrefix]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('spokeNetworkTwo').subnetName]",
                        "properties": {
                            "addressPrefix": "[variables('spokeNetworkTwo').subnetPrefix]"
                        }
                    }
                ]
            }
        },

        // Virtual network peering spoke one to hub
        {
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "2020-05-01",
            "name": "[concat(variables('spokeNetworkOne').name, '/peer-to-', variables('hubNetwork').name)]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('hubNetwork').name)]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('spokeNetworkOne').name)]"
            ],
            "properties": {
                "remoteVirtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('hubNetwork').name)]"
                },
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": true,
                "useRemoteGateways": false
            }
        },
        // Virtual network peering hub to spoke one
        {
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "2020-05-01",
            "name": "[concat(variables('hubNetwork').name, '/peer-to-', variables('spokeNetworkOne').name)]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('hubNetwork').name)]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('spokeNetworkOne').name)]"
            ],
            "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": true,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('spokeNetworkOne').name)]"
                }
            }
        },
        // Virtual network peering hub to spoke two
        {
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "2020-05-01",
            "name": "[concat(variables('hubNetwork').name, '/peer-to-', variables('spokeNetworkTwo').name)]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('hubNetwork').name)]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('spokeNetworkTwo').name)]"
            ],
            "properties": {
                "remoteVirtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('spokeNetworkTwo').name)]"
                },
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": true,
                "useRemoteGateways": false
            }
        },
        // Virtual network peering spoke two to hub
        {
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "2020-05-01",
            "name": "[concat(variables('spokeNetworkTwo').name, '/peer-to-', variables('hubNetwork').name)]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('hubNetwork').name)]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('spokeNetworkTwo').name)]"
            ],
            "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": true,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('hubNetwork').name)]"
                }
            }
        }
    ]
}
